name: r2
git_url: 'git://github.com/dog-days/r2.git'
author: dog-days
description: >-
  基于React、Redux、react-router、react-router-redux、react-redux、immutable.js、Ant-Design等SPA开发手脚框架
tags:
  - redux
  - antd
  - immutable.js
coverPicture: null
readme: "# R2框架\n\n[R2框架](https://github.com/dog-days/r2)(Redux React Framework)主要是基于React、Redux而构建的，其中还是用了`react-router`、`react-router-redux`、`react-redux`、`immutable.js`。同时使用webpack模块加载工具，采用ES62015语法。所有如果要使用本框架，这些知识多多少少都要会点的。同时也使用了[Ant Design React](http://ant.design/#/docs/react/introduce)组件,生成的页面使用的UI是Ant Design,目前只支持这种，后面页面生成也会支持多种UI组件。 R2框架旨在快速搭建页面，减少重复工作，减少重复代码，提高开发效率。\n\n特别说明：下面的环境是在mac下搭建的，在windows上会有差异。\n\n## R2框架相关阅读\n\n- [webpack配置](http://blog.leanote.com/post/sams/webpack%E7%9F%A5%E8%AF%86%E7%82%B9%E6%BB%B4) \n\n## 框架目录\n\n```shell\nR2/\n    - public/                      \t\t#项目最终生成处，直接拷贝到服务环境下即可访问\n        index.html                 \t\t#生成环境的index.html    \n        index_dev.html             \t\t#开发环境的index_dev.html    \n        + js/                      \t\t#生成的js和样式文件都在里面\n    - src/                         \t\t#框架和应用代码目录\n        index.jsx                  \t\t#框架应用入口文件\n        routes.js                  \t\t#路由配置处,可以自定义（不建议,后面会说到）\n        reducers.js                \t\t#Redux reducers总入口\n        store.js                   \t\t#Redux store配置处\n        - libs/                    \t\t#类库自定义的类库,框架使用者的类库可以放这里\n            + r2/                  \t\t#R2框架类库存放处，使用框架这不用理会\n        + common                   \t\t#当前项目公共component和设置等\n        - page/                    \t\t#页面级代码\n            App.js                 \t\t#路由第一层\"/\"component\n            action.js        \t   \t    #可自定义的公共actionCreator\n            reducer.js             \t\t#可自定义的公共reducer\n            + nopage               \t\t#404页面\n            + .viewModel           \t\t#页面模板（后面详说）\n            - view                 \t\t#各个页面存放位置\n                + layout           \t\t#layout文件存放处\n            \t\t- main/\n            \t\t\t_route.js \t   \t\t#路由设置处\n            \t\t\t.child_routes.js \t#自动生成，后面详解\n                - index/           \t\t#应用页面demo,参考使用\n                \t_route.js \t   \t    #路由设置处\n                    index.js       \t\t#index页面入口文件\n                    action.js      \t\t#Redux action，demo action任务定义处，当然也可以没有\n                    reducer.js     \t\t#Redux reducer，demo reducer定义处，当然也可以没有\n    + .end/                        \t\t#智能功能开发处，框架使用者不用理会\n    - style/                       \t\t#样式图片存放处,这个看喜好吧,约定方式\n        + css/                     \t\t#css样式\n        + img/                     \t\t#图片存放处\n    Gruntfile.js                   \t\t#grunt配置文件，根据需要自己拓展配置h打包生成环境\n    server.js                      \t\t#启动服务配置文件,开发环境\n    webpack.config.js              \t\t#webpack配置，根据需要自己拓展配置，开发环境 \n    package.js                     \t\t#npm配置文件\n    .babelrc                       \t\t#babel设置\n    .gitignore                     \t\t#git提交忽略设置\n```\n\n## 安装使用\n\n由于还没有正式的版本，可以clone或者下载本框架文件,然后运行下面命令。\n通过nvm安装node（nvm可以管理多个版本node,可以来回切换,请使用v6.0.0以上）\n\n```sh\n//安装nvm\ncurl -o- https://raw.githubusercontent.com/creationix/nvm/v0.31.0/install.sh | bash\n//安装最新版node,并可以立刻使用node不用重启终端,安装时好像被墙了，通过vpn装成功\nnvm install node && nvm alias default node\n```\n\nnpm安装如果被墙可以使用[淘宝镜像](http://npm.taobao.org/)，单不建议使用cnpm，使用cnpm有时候会安装不完全，直接在~/.npmrc中直接配置：\n\n```sh\nregistry=https://registry.npm.taobao.org\n```\n\n```sh\n#如果没有安装grunt，请先安装要grunt。\nnpm install -g grunt-cli #安装全局命令\nnpm install #等待安装各种需要的package\ncd .end && npm install && cd ../ #安装本框架node后端支持，部分功能需要用到\nnpm run ac\nnpm start\n```\n\n然后直接在浏览中打开`http://localhost:8888/`,即可访问。\n\n### R2框架命令\n\nR2框架中自定义了如下命令\n\n```\n//运行服务，windows平台请使用,npm run startw\nnpm start \n```\n\n```\n//打包生成生产环境文件，windows平台请使用,npm run buildw\nnpm build \n```\n\n```\n//智能Route和Reducer生成命令,情况后续说明\nnpm run ac \n```\n\n```\n//开启R2框架后端服务支持，使用页面新建功能时最好开启需要开启，要不然看不了数据，详细后续说明\nnpm run startend \n```\n\n```\n//运行所有前端webpack和本框架的后端服务,windows使用npm run startwboth\nnpm run startboth \n```\n\n`npm run startboth` 相当于 `npm start && npm run startboth`\n\n```\nnpm run cv //页面生成,后续详说\n```\n\n## 智能构建\n\n经过上面的步骤可以运行看到页面了，现在开始看如何搭建一个新的页面，在搭建页面前先介绍R2框架自带的一些功能。\n\n### 智能构建route和reducer\n\n何为智能route和reducer,在R2框架中，只要遵循view文件位置约定规则，route和reducer就可以通过命令生成！你没听错，是用R2框架是不用怎么关注路由和reducer绑定的！\n运行一下命令即可\n\n```\nnpm run ac  // ac全称auto creator\n```\n\n不过要注意的是，view文件要按照约定位置放好，`R2/src/page/view`目录下新建文件夹就属于一个新页面(必须包含文件_route.js，layout是特殊的view，有点不一样),而reducer生成条件是在view目录下新建reducer.js就会被视为新建reducer，本框架强烈建议在当前页面文件夹中新建reducer.js。\n\n`npm run ac` 不带参数读取`R2/src/page/view`目录中文件，`npm run ac -- -m` 读取的时模板目录 `R2/src/page/.viewModel`，所有要查看模板，请运行`npm run ac -- -m`，之后在浏览器上访问指定模板即可。\n\n其中`reducer.js`需要遵守一定格式！ `reducer.js`格式如下:\n\n```jsx\nexport function origin(state = {}, action) {\n    switch (action.type) {\n        case RECIEVEORIGIN:     \n        default:\n            return state;\n    }\n}\n```\n\n不要使用下面这样的格式,虽然是没错，单目前R2框架还不支持智能识别这种格式。\n\n```jsx\nmodule.exports = {\n    origin(state,action){}\n}\n```\n\n### 页面生成器\n\n需要使用到以下命令\n\n```\nnpm run cv -- options \n```\n\noptions如下\n\n| 缩写   | 全称                    | 描述                        |\n| ---- | --------------------- | ------------------------- |\n| -h   | --help                | 帮助命令                      |\n| -V   | --version             | 版本命令                      |\n| -e   | --emptyPage           | 创建emptyPage视图模板           |\n| -n   | --noactionreducer     | 创建noactionreducer视图模板     |\n| -t   | --tableNoPagination   | 创建tableNoPagination视图模板   |\n| -p   | --tableWithPagination | 创建tableWithPagination视图模板 |\n| -l   | --layout              | 指定创建视图的layout，配合上面的命令使用   |\n\n例如：\n\n```shell\nnpm run cv -- -p test -l main //不使用-l时，默认为main\n```\n\n## 基本使用\n\n### layout模式\n\nlayout是特殊的一种view，其实就是react-router中的第二层组件（第一个是\"/\"，本框架是`src/page/App.jsx`），view是其子组件。以一种layout为例：\n\nlayout包括以下必要文件\n\n- `_route.js`，用作路由生成，可自行修改，单务必按照以下格式。\n\n```jsx\n'use strict';\nvar view = function(){\n\t//这里try在浏览器中是多此一举，在智能路由中，node环境就需要,跳过r2Common未定义异常\n\tvar re; \n\ttry{\n\t\tre = `${r2Common.prefixUrl}`;\n\t}catch(e){}\n\treturn re;\n}\nvar childRoutes = function(){\n    //这里try在浏览器中是多此一举，在智能路由中，node环境就需要,跳过r2Common未定义异常\n\tvar re;\n\ttry{\n\t\tre = require('./.child_routes.js');\n\t}catch(e){}\t\n\treturn re;\n}\nvar indexRoute = function(){\n    //这里try在浏览器中是多此一举，在智能路由中，node环境就需要,跳过r2Common未定义异常\n\tvar re;\n\ttry{\n\t\tre = require(\"src/page/view/index/_route.js\");//indexRoute指定位置\n\t}catch(e){}\t\n\treturn re;\n}\nmodule.exports = {\n\tpath: view(), \n    getComponent(location, cb) {\n        require.ensure([], (require) => {\n            cb(null, require(\"./index\"))\n        },\"main\")\n    },\n   \tindexRoute: indexRoute(),\n    childRoutes: childRoutes(),\n}\n```\n其中`r2Common.prefixUrl`是公共path部分（详细看下面公共path部分），可自行定义默认为空。如果定义后为`/r2`访问`/`会跳转到`/r2`路由。有点需要注意的是：**indexRoute**需要自己手动指定位置。\n\n- `index.jsx`，传进react-router处理\n\n```jsx\nimport React from 'react'\nimport Component from 'r2/module/ModuleComponent'\nimport { connect } from 'react-redux'\n\nclass View extends Component {\n\tconstructor(props){\n\t\tsuper(props);//使用了构造器,必须要super(props)继承 \n\t}\n    render() {\n\t\tsuper.render();//需要继承，本框架做了些处理，不继承，热替换失效。\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{ this.props.children || \"\" }\n\t\t\t</div>\n\t\t)\t\n    }\n}\nvar ReduxView = connect((state)=>{\n\treturn {\n\t};\n})(View)\nReduxView.defaultProps = Object.assign({},Component.defaultProps,{\n\thomeLink: {\n\t\tlabel:<Antd.Icon type=\"home\"/>,\n\t\tlink:'/',\n\t},\n});\nmodule.exports = ReduxView; \n```\n\n- .child_routes.js\n\n  `.child_routes.js`是个隐藏文件，自动生成。\n\n### view模式\n\nview是我们代码开发主要地方，以下是必要文件，`action.js`和`reducer.js`看需要。\n\n- `_route.js`,可当做二级路由（没layout）或三级路由（有layout），可自行修改，单务必按照以下格式。\n\n```jsx\n'use strict';\nvar view = function(){\n\t//这里try在浏览器中是多此一举，在智能路由中，node环境就需要,跳过异常\n\tvar re; \n\ttry{\n\t\tre = `${r2Common.prefixUrl}/about`;\n\t}catch(e){}\n\treturn re;\n} \n//以下配置请参照React-Router官方文档\nmodule.exports = {\n\tlayout: \"main\",//在这里设置layout\n\tpath: view(), \n    getComponent(location, cb) {\n        require.ensure([], (require) => {\n            cb(null, require(\"./index\"))\n        },\"about\")//webpack生成文件命名\n    },\n}\n```\n\n- `index.jsx`代码结构\n\n```jsx\nimport React from 'react'\nimport Component from 'r2/module/ModuleComponent'\n\nclass View extends Component {\n    constructor(props){\n        super(props);//使用了构造器,必须要super(props)继承 \n    }\n    render() {\n        super.render();//需要继承，本框架做了些处理，不继承，热替换失效。\n        return (\n            <div></div>\n        )\n    }\n}\n\nvar ReduxView = connect((state)=>{\n    return {\n    };\n})(View)\nReduxView.defaultProps = Object.assign({},Component.defaultProps,{\n    title: \"title设置处\",\n    breadcrumb:[\n        {\n            label:'home',\n            link: '/',\n        },\n        {\n            label:'导播活动列表',\n        },\n    ],\n});\nmodule.exports = ReduxView; \n```\n\n### 设置公共path\n\n假设我们的域名是localhost，平常我们都是直接访问http://localhost就看访问了页面主页。但是也有特殊要求，要在http://localhost/main访问主页，访问http://localhost也跳转到http://localhost/main(当然通过ngnix可以做些特殊处理)。这个功能就是给你设置main的。\n\n通过`r2Common.prefixUrl`（位置在`src/common/common.js`）设置，默认为空，如果不为空第一个字符必须是`/`，如\n\n```jsx\nr2Common.prefixUrl = '/main';//如果只设置为'main',访问时会报404。\n```\n\n### 设置浏览器标签title\n\nR2框架是通过react default props设置title的， 在页面index.jsx中设置如下\n\n```jsx\nReduxView.defaultProps = Object.assign({},Component.defaultProps,{\n    title: \"title设置处\",\n});\n```\n\n### layout切换\n\nlayout默认是`page/view/layout/main`，设置位置为每个view中的`_route.js`，代码如下。\n\n```jsx\n'use strict';\nvar view = function(){\n\t//这里try在浏览器中是多此一举，在智能路由中，node环境就需要,跳过异常\n\tvar re; \n\ttry{\n\t\tre = `${r2Common.prefixUrl}/about`;\n\t}catch(e){}\n\treturn re;\n} \nmodule.exports = {\n\tlayout: \"main\",//在这里设置layout\n\tpath: view(), \n    getComponent(location, cb) {\n        require.ensure([], (require) => {\n            cb(null, require(\"./index\"))\n        },\"about\")\n    },\n}\n```\n\n当设置为false时或者不设置，就没有layout。\n\n### 面包屑\n\n面包屑功能稍微特殊点，需要结合layout页面使用，目前的面包写是针对Ant Design UI做处理的。\n面包屑默认自带首页，如果需要修改可以在layout组件中的default props修改。\n\n修改layout组件默认的首页：\n\n```jsx\n//此处为layout组件\nvar ReduxView = connect((state)=>{\n\treturn {\n\t};\n})(View)\nReduxView.defaultProps = Object.assign({},Component.defaultProps,{\n\thomeLink: {\n\t\tlabel:<Antd.Icon type=\"home\"/>,\n\t\tlink:'/',\n\t},\n});\nmodule.exports = ReduxView; \n```\n\n在当前页面组件的index.jsx中设置如下：\n\n```jsx\nReduxView.defaultProps = Object.assign({},Component.defaultProps,{\n    title: \"title设置处\",\n    breadcrumb:[\n        {\n            //还支持函数\n            label:function(params){\n                //params是R2从路由参数`:id`中解析处理，以`-`为分隔符。\n                //如果当前路由为`/test/page/9_demo`,params = [9,'demo']\n                return params[1];\n            },\n            link: function(parms){\n                //同label\n                return \"test/page/\"+params[0]; \n            },\n        },\n        {\n            label:'循环存储查询',\n            link: \"/test\",\n        },\n        {\n            label:'循环存储查询',\n        },\n    ]\n});\n```\n\n**展示**需要手动在当前的layout组件中添加，位置自定义：\n\n```jsx\n<div className=\"r2-breadcrumb\">\n\t{ this.breadcrumb || \"\" }\n</div>\n```\n\n### 自定义route\n\nR2框架目标是让使用者可以不用理会路由层，不过也提供了自定义路由和覆盖已生成的路由。进入`R2/src/routes.js`,代码如下：\n\n```jsx\nimport routes from '.fr/.temp/routes'\n/**\n *   var routes = {\n *      path : \"/\",\n *      indexRoute: \"\",\n *      component: \"\",\n *      childRoutes: { }\n *  }\n */\n//如果想自定义这里也是可以的,\n//Object.assign(routes.childRoutes,{\n\n//})\nmodule.exports = routes;\n```\n\n如果不了解，请先了解[react-router](https://github.com/reactjs/react-router)\n\n### 定义公共actionCreator\n\nR2框架公共actionCreator定义于`R2/src/page/action`,建议公共的actionCreator就定义在这里（当然你想定义在其他地方也可以）。commonAction代码如下\n\n```jsx\nimport * as r2ActionCreator from \"r2/actionCreator\"\n\nlet requestPosts = r2ActionCreator.requestPosts; \nlet receivePosts = r2ActionCreator.receivePosts; \nexport const REQUESTLOGOUT = \"REQUESTLOGOUT\"\nexport const RECIEVELOGOUT = \"RECIEVELOGOUT\"\n\nexport function logout(successCallback,callbackAllStatus) {\n    var url = r2Common.REQUESTURL + \"/sop/v1/operators/logout\";\n    return r2fetch({\n        method: 'POST',\n        params:{},\n        callbackAllStatus,\n        successMessage: true,\n    }).dispatchFetchOne(url,requestPosts(REQUESTLOGOUT,\"logout\"),receivePosts(RECIEVELOGOUT,\"logout\"),successCallback)\n}\n```\n\n### 定义公共reducer\n\nR2框架公共reducer定义于`R2/src/page/reducer`,建议公共的reducer就定义在这里（当然你想定义在其他地方也可以）,然后运行`npm run ac`进行reducer绑定。代码如下\n\n```jsx\nimport * as actionCreator from './action' \n\nexport function logout(state = {}, action) {\n    switch (action.type) {\n        \n        case actionCreator.REQUESTLOGOUT: \n        case actionCreator.RECIEVELOGOUT:   \n            return Object.assign({}, state,action);\n        \n        default:\n            return state;\n    }\n}\n```\n\n### 全局变量定义\n\n目前R2框架的全局变量如下，详细情况API。\n\n- r2fn,公共常用方法\n- r2ActionCreator,公共actionCreator\n- r2fetch,R2封装的fetch方法\n- r2Common,当前项目公共配置或方法\n\n## 国际化功能\n\n国际化语言包位置在`R2/src/common/locale`文件中，`index.js`文件是默认是当地开发中语言。配置语言位置在`R2/src/common/common.js`中，如下：\n\n```js\n//国际化处理，language未定义就是默认使用./locale/index.js\nexport const language = require(\"./locale/en_US\")\n```\n\n使用方式如下：\n\n```jsx\n...\nreturn (\n\t<div>{r2fn.t(\"主页\")}</div>\n)\n...\n```\n\n`locale/index.js`\n\n```jsx\nmodule.exports = [\n\t\"R2框架\",\n\t\"主页\",\n\t\"关于\",\n\t\"这是一个主页页面！\",\n\t\"这是一个关于页面！\",\n]\n```\n\n`locale/en_US.js`，索引位置要跟上面的一一对应，所以最好以index.js模板进行翻译，**注意空格**哦\n\n```js\nmodule.exports = [\n\t\"R2 framework\",\n\t\"Home\",\n\t\"About\",\n\t\"This is a home page!\",\n\t\"This is a  about page!\",\n]\n```\n\n## 约定位置\n\n## 其他的一些特殊模式\n\n为了更好的管理代码，R2框架建议，所有React组件继承`r2/module/BasicComponent`(layout组件式特殊的一种)。之后新的组件包括页面index.jsx组件，数据逻辑处理请全部写在方法dataAdapter中，事件处理写在events中,redux 的dispatch actionCreator写在方法actions中。代码示例如下：\n\n```jsx\nimport React from 'react'\nimport Component from 'r2/module/ModuleComponent'\nimport { connect } from 'react-redux'\n\nclass View extends Component {\n    constructor(props){\n        super(props); \n    }\n    \n    actions(){\n        return {\n            getData(){\n                this.props.dispatch(actionCreator());\n            },\n        }\n    }\n        \n    dataAdapter(){\n        return {\n            sortData(){\n                this.props.data.sort((a,b)=>{\n                    return b-a;\n                })\n            },\n        } \n    }\n    \n    events(){\n        return {\n            handleClick(text){\n                return (e)=>{\n                    console.debug(text)\n                    console.debug(e)\n                }\n            }\n        }\n    }\n    \n    render() {\n        super.render();\n        this.sortData();\n        return (\n            <div onClick={this.handleClick(\"骚年！\")}>\n                Hello Word!\n            </div>\n        )   \n    }\n}\nmodule.exports = View; \n```\n\n定义在dataAdapter和events中的方法可以被组件`this`直接访问，R2框架内部做了处理。事件绑定也建议使用thunk模式。\n\n## 可能会遇到的坑\n\n### 使用淘宝镜像问题\n\n使用cnpm install有些包会出问题（mac上），把报错包卸掉，使用npm安装就没问题。\n以下是cnpm安装后报错报\n\n- extract-text-webpack-plugin \n\n## FAQ\n\n正在整理。 \n\n\n\n"
deployedAt: 2017-05-16T03:50:16.927Z
