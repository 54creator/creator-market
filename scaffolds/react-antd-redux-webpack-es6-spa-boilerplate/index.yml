name: react-antd-redux-webpack-es6-spa-boilerplate
git_url: 'git://github.com/zkboys/react-antd-redux-webpack-es6-spa-boilerplate.git'
author: zkboys
description: 管理系统架构，基于 antd + react + redux + webpack + ES6 的单页面应用
tags: []
coverPicture: 'https://ucarecdn.com/94ac0966-5acc-4f4a-a4de-eba4a174d0d6/'
readme: "# react-antd-redux-webpack-es6-spa-boilerplate\n> 管理系统架构，基于 antd + react + redux + webpack + ES6 的单页面应用\n\n管理系统往往是大量的表单表格等页面，存在大量的体力劳动，基于长期的管理系统开发，整理出一套管理系统架构、组件、通用方法来提高开发效率。\n可以以此为基础，快速创建管理系统项目。simple is all，make coding easy!\n\n## 架构功能一览：\n\n1. UI基于antd，完整的登录、退出登录、菜单等结构。\n1. 前后端分离，前后端可以并行开发，前端单独部署。\n1. 基于webpack2.0进行构建，对构建进行了优化，提高rebuild速度，提高开发效率。\n1. 菜单、页面标题、面包屑导航自动获取+可配置。\n1. redux写法封装、简化的redux写法、与存储自动同步、异步redux写法、异常处理，相关文档在: src/redux/README.md。\n1. ajax自动提示封装、全局+局部配置、ajax高阶组件自动释放资源、前后端约定统一错误处理。\n1. 路由简化配置，页面直接声明一个PAGE_ROUTE变量，自动生成路由配置文件。相关文档在: src/route/README.md。\n1. 后端交互统一封装成service、提供基于restFull，提供BaseService基础方法、service高阶组件自动释放资源。\n1. mock规则可配置，快速切换mock数据与真实数据\n1. 基础CRUD代码生成，减少不必要的体力劳动。脚本在bin目录下。\n1. css 模块化，有效避免css命名冲突，提高css命令灵活性。\n1. 使用eslint 结合 webpack 统一代码规范，降低各个开发人员直接的沟通成本，提高代码质量。\n\n## 开发环境\n1. node v7.2.1\n2. yarn v0.27.5\n3. 兼容windows/mac 还没在ubuntu上开发，未知。\n\n## 安装、开发/生产构建\n> 推荐使用[yarn](https://yarnpkg.com/zh-Hans/)进行构建，yarn可以更好的组织依赖，下载依赖速度更快，也许还需要翻墙。\n您也可以使用[npm](https://www.npmjs.com/)；\n下载速度慢，可以考虑使用[淘宝的cnpm](http://npm.taobao.org/)\n\nyarn:\n``` bash\n# 安装所有依赖\n$ yarn\n\n# 启动开发\n$ yarn dev\n\n# 生产环境构建\n$ yarn build\n\n# 清除缓存（如果发现源码与webpack编译文件明显不一致，有可能是缓存脏数据）\n$ yarn clear-cache\n```\nnpm:\n``` bash\n# 安装所有依赖\n$ npm install\n\n# 启动开发\n$ npm run dev\n\n# 生产环境构建\n$ npm run build\n\n# 清除缓存（如果发现源码与webpack编译文件明显不一致，有可能是缓存脏数据）\n$ npm run clear-cache\n```\ncnpm:\n``` bash\n\n# 安装所有依赖\n$ cnpm install\n\n# 启动开发\n$ cnpm run dev\n\n# 生产环境构建\n$ cnpm run build\n\n# 清除缓存（如果发现源码与webpack编译文件明显不一致，有可能是缓存脏数据）\n$ cnpm run clear-cache\n\n```\n\n## 项目结构\n```\n.\n├── .happypack                      // happypack缓存文件\n├── bin                             // 代码生成脚本\n├── builder                         // 构建工具\n├── dist                            // 开发构建时，生成的临时文件，生产环境不用\n├── local-default                   // 个性化配置，用户分模块打包、个人配置等，只开发模式有效，目前没启用，预留功能\n├── public                          // 构建之后的代码，用户生产环境部署\n├── src                             // 开发主要目录\n│    ├── commons                    // 系统公共方法，组件\n│    ├── frame                      // 页面框架，头部+左侧等\n│    ├── mock                       // mock数据，截获ajax请求，便于前端单独调试\n│    │\_\_ └── mockdata               // 模拟数据 mockjs\n│    ├── pages                      // 业务页面，业务开发主要关系目录\n│    │\_\_ ├── error                  // 一些error页面，404 403 401 等等\n│    │\_\_ ├── examples               // 一些例子\n│    │\_\_ └── home                   // 首页\n│    ├── redux                      // redux 相关\n│    │   ├── actions                // redux action定义\n│    │   ├── reducers               // redux reducers定义目录\n│    │   ├── store                  // redux store\n│    │   └── actionTypes.js         // actions 和 reducers使用的types常量\n│    ├── route                      // 路由 相关\n│    ├── services                   // 前端服务，一般是ajax请求等一些封装，提供基础数据\n│    ├── all-routes.js              // 脚本生成的路由配置文件\n│    ├── App.jsx                    // 项目入口文件\n│    ├── global.less                // 全局样式定义\n│    ├── page-init-state.js         // 全局样式定义\n│    ├── page-init-state.js         // 脚本生成的简化redux写法的初始化state\n│    ├── page-routes.js             // 脚本生成的路由配置文件\n│    └── variables.less             // 主题变量\n├── static                          // 非构建依赖的静态文件\n├── .babelrc\n├── .eslintignore\n├── .eslintrc.js\n├── .gitignore\n├── favicon.png\n├── index.html\n├── package.json\n├── postcss.config.js\n├── README.md\n└── yarn.lock\n```\n\n## 文件命名约定\n\n1. 文件夹小写英文加连字符\"-\"，比如：`src/pages/user-center`\n1. less文件、js文件 小写英文加连字符\"-\"，比如：`user-center.less`、`user-center.js`\n1. jsx文件（组件），首字母大写，驼峰命名，比如：`UserCenter.jsx`\n\n## 系统菜单激活状态\n> 系统菜单的激活状态根据url地址，自动判定\n\n如果是二级页面，比如添加页面，需要保持其父级页面菜单状态，菜单path需要写成`parentPath/+childPath`，使用`/+`作为分界，比如：\n```\nlist页面：\nexport const PAGE_ROUTE = '/example/users'\n\nlist页面的添加按钮，跳转到添加页面，但是页面菜单选中状态要保持list页面状态\n\nexport const PAGE_ROUTE = '/example/users/+add'\n```\n\n## 页面头部\n> 页面头部标题、面包屑导航系统会根据页面状态自动获取，但也可以控制显示隐藏、修改标题、修改面包屑。\n\n### 显示隐藏\n```\ncomponentWillMount() {\n    this.props.$actions.hidePageHeader();\n}\n\n```\n\n### 修改标题\n```\ncomponentWillMount() {\n    this.props.$actions.setPageTitle('自定义页面标题');\n}\n```\n\n### 自定义面包屑导航\n```\ncomponentWillMount() {\n    this.props.$actions.setPageBreadcrumbs([\n        {\n            key: 'zidingyi',\n            path: '',\n            text: '自定义',\n            icon: 'fa-user',\n        },\n        {\n            key: 'mianbaoxie',\n            path: '',\n            text: '面包屑',\n            icon: 'fa-user',\n        },\n        {\n            key: 'daohang',\n            path: '',\n            text: '导航',\n            icon: 'fa-user',\n        },\n    ]);\n}\n```\n\n## 前后端分离 ngnix配置 参考\n```\n# 服务地址\nupstream api_service {\n  server localhost:8080;\n  keepalive 2000;\n}\n#\nserver {\n    listen       80;\n    server_name  localhost;\n    location / {\n      root /home/app/nginx/html; // 前端打包之后的文件存放路径\n      index index.html;\n      try_files $uri $uri/ /index.html; #react-router 防止页面刷新出现404\n    }\n    location ^~/api { // 代理ajax请求，前端的ajax请求配置了统一的baseUrl = ‘/api’\n       proxy_pass http://api_service/;\n       proxy_set_header Host  $http_host;\n       proxy_set_header Connection close;\n       proxy_set_header X-Real-IP $remote_addr;\n       proxy_set_header X-Forwarded-Server $host;\n    }\n}\n```\n\n## 构建拆分 TODO\n> 基于配置，进行不同项目的打包构建，解决不同项目，但是类似，有很多通用组件，但是要单独发布的情景\n\n构建可以传入config文件，基于config文件可以构建出不同的项目\n```\n\"dev\": \"yarn run clear-cache && yarn run dll && cross-env NODE_ENV=development node ./builder/dev-server.js --cfg ./xxx.config.js\",\n```\n\nxxx.config.js如下\n```js\nmodule.exports = {\n    // 业务页面所在目录，用来构建路由以及init state，字符串或者数组\n    pagePath: './src/pages/**/*.jsx',\n    // pagePath: [\n    //     './src/pages/reserve/**/*.jsx',\n    //     './src/pages/sale/**/*.jsx',\n    // ],\n\n    // 忽略文件，不进行构建，提供部分模块打包功能，一般是配合补充 pagePath 进行使用，字符串或者数组\n    pageIgnore: [\n        // '**/ActionsExample.jsx',\n    ],\n\n    // webpack配置，区分不同环境\n    webpack: {\n        base: {\n            entry: {\n                app: './src/App.jsx',\n                login: './src/pages/login/Login.jsx',\n            },\n        },\n        dev: {},\n        prod: {},\n        dll: {},\n    },\n};\n```\n\n## TODO\n- [x] 登录之后，获取菜单数据，并存入session中，由于页面头部是由菜单生成的，如果菜单是异步获取的，将会存在各种问题，所以进入系统时候保证菜单可用\n- [x] 构建优化：css postcss的使用，自动添加前缀等功能\n- [x] 是否使用 css module功能，好像加不上，antd不是module方式，如果使用module，antd less 构建会失败。 通过配置可以区分出那些模块使用css module，那些不使用。\n- [x] 添加事件，移除事件的高阶组件\n- [x] redux 中数据，实现部分数据同步到localStorage中，目前是可以选择性恢复，可以满足需求\n- [x] source-map改如何使用\n- [x] 左侧菜单可拖动缩放宽度\n- [x] zk-react 开发模式构建慢问题，升级到webpack2.0，添加了一些优化\n- [x] antd 通用校验规则整理到zk-react中\n- [x] antd edit-cell其他表单元素完善、 可配置form组件（可用于查询条件、简单的form）\n- [x] antd 自定义异步校验，多个异步校验互相干扰问题 可以使用Promise.all包装各个请求\n- [x] 系统注入到props中的变量统一使用'$'开头，比如$ajax $event $domEvent $service $actions\n- [ ] 字体图标，团队有条件还是定制的好，全部引入会多出300~400KB。\n- [ ] 修改less时可以hot reload ，修改jsx为什么直接reload？\n- [ ] antd 图标本地部署问题：缓存问题，antd.less需要全部引入，会多550KB的css代码\n- [ ] docker 前端生产环境部署\n- [ ] 菜单匹配时，如果path携带参数，怎么能匹配成功？\n- [ ] css module class name 长短问题\n- [ ] css module=true background: url(); 问题 Module not found: Error: Can't resolve 'login-bg.jpg'\n- [ ] 测试：单元测试，端对端测试\n- [ ] 使用ts重构？\n"
deployedAt: 2017-08-25T01:42:29.694Z
